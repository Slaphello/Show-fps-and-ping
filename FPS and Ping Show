local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

if not player then
    warn("LocalPlayer not found.")
    return
end

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "PingFPSDisplayGUI"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true  -- Avoid Safe Area constraints

-- Create main GUI frame
local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Size = UDim2.new(0, 250, 0, 40)
mainFrame.Position = UDim2.new(0, 10, 0, 10)
mainFrame.AnchorPoint = Vector2.new(0, 0)
mainFrame.BackgroundTransparency = 0.5
mainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

local mainCorner = Instance.new("UICorner", mainFrame)
mainCorner.CornerRadius = UDim.new(0, 12)

-- Stats label
local statsLabel = Instance.new("TextLabel", mainFrame)
statsLabel.Size = UDim2.new(1, -10, 1, -10)
statsLabel.Position = UDim2.new(0, 5, 0, 5)
statsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
statsLabel.TextScaled = true
statsLabel.Font = Enum.Font.SourceSansBold
statsLabel.Text = "Ping: 0 ms | FPS: 0"
statsLabel.BackgroundTransparency = 1
statsLabel.RichText = true

-- FPS & Ping calculation variables
local lastTime = tick()
local frameCount = 0
local lastPingTime = 0
local ping = 0

-- Function to clamp GUI position within screen bounds
local function clampPosition(position)
    local screenSize = workspace.CurrentCamera.ViewportSize
    local maxX = screenSize.X - mainFrame.Size.X.Offset
    local maxY = screenSize.Y - mainFrame.Size.Y.Offset
    local newX = math.clamp(position.X.Offset, 0, maxX)
    local newY = math.clamp(position.Y.Offset, 0, maxY)
    return UDim2.new(0, newX, 0, newY)
end

-- Function to get FPS color
local function getFPSColor(fps)
    if fps > 60 then
        return Color3.fromRGB(0, 255, 0)
    elseif fps > 30 then
        return Color3.fromRGB(255, 255, 0)
    else
        return Color3.fromRGB(255, 0, 0)
    end
end

-- Function to get Ping color
local function getPingColor(ping)
    if ping < 100 then
        return Color3.fromRGB(0, 255, 0)
    elseif ping < 200 then
        return Color3.fromRGB(255, 255, 0)
    else
        return Color3.fromRGB(255, 0, 0)
    end
end

-- Update the stats display
local function updateStatsDisplay(ping, fps)
    local fpsColor = getFPSColor(fps)
    local pingColor = getPingColor(ping)
    statsLabel.Text = string.format(
        '<font color="rgb(255,255,255)">Ping:</font> <font color="rgb(%d,%d,%d)">%d ms</font> | <font color="rgb(255,255,255)">FPS:</font> <font color="rgb(%d,%d,%d)">%d</font>',
        pingColor.R * 255, pingColor.G * 255, pingColor.B * 255, ping,
        fpsColor.R * 255, fpsColor.G * 255, fpsColor.B * 255, fps
    )
end

RunService.RenderStepped:Connect(function()
    frameCount += 1
    local currentTime = tick()

    -- Calculate FPS every second
    if currentTime - lastTime >= 1 then
        local fps = frameCount
        frameCount = 0
        lastTime = currentTime

        -- Calculate Ping every second
        if currentTime - lastPingTime >= 1 then
            ping = math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue()) + 1
            lastPingTime = currentTime
        end

        -- Update stats display
        updateStatsDisplay(ping, fps)
    end
end)

-- Dragging functionality for the GUI
local dragging, dragStart, startPos, dragInput

-- Handle mouse button press to start dragging
mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position

        -- Reset dragging status when input ends
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

-- Detect mouse movement to update the position of the GUI
mainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

-- Update GUI position as the mouse moves while dragging
UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        mainFrame.Position = clampPosition(UDim2.new(0, startPos.X.Offset + delta.X, 0, startPos.Y.Offset + delta.Y))
    end
end)

-- Toggle button to show/hide the GUI
local toggleButton = Instance.new("TextButton", screenGui)
toggleButton.Text = "Toggle Stats"
toggleButton.Size = UDim2.new(0, 100, 0, 30)
toggleButton.Position = UDim2.new(0, 10, 0, 60)
toggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
toggleButton.BackgroundTransparency = 0.7
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.TextTransparency = 0.5
toggleButton.TextScaled = true

-- Toggle the visibility of mainFrame when clicked
toggleButton.MouseButton1Click:Connect(function()
    mainFrame.Visible = not mainFrame.Visible
end)

-- Credits: Script by [Slaphello]
