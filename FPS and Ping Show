-- Open source now
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Stats = game:GetService("Stats")
local TweenService = game:GetService("TweenService")

local localPlayer = Players.LocalPlayer
if not localPlayer then
    warn("LocalPlayer not found!")
    return
end

local function getGUIParent()
    local parent = localPlayer:WaitForChild("PlayerGui")
    if gethui then
        parent = gethui()
    elseif get_hidden_gui then
        parent = get_hidden_gui()
    end
    return parent
end

local parentGui = getGUIParent()

if
    not Stats or not Stats.Network or not Stats.Network.ServerStatsItem or
        not Stats.Network.ServerStatsItem:FindFirstChild("Data Ping")
 then
    warn("Stats service not available!")
    return
end

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "PingFPSDisplay"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = parentGui

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 160, 0, 32)
mainFrame.Position = UDim2.new(0, -200, 0, 10)
mainFrame.BackgroundTransparency = 1
mainFrame.BackgroundColor3 = Color3.new(0, 0, 0)
mainFrame.Parent = screenGui

local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 12)
uiCorner.Parent = mainFrame

local statsLabel = Instance.new("TextLabel")
statsLabel.Name = "StatsLabel"
statsLabel.Size = UDim2.new(1, -8, 1, -6)
statsLabel.Position = UDim2.new(0, 4, 0, 3)
statsLabel.TextColor3 = Color3.new(1, 1, 1)
statsLabel.TextScaled = true
statsLabel.Font = Enum.Font.SourceSansBold
statsLabel.BackgroundTransparency = 1
statsLabel.RichText = true
statsLabel.TextTransparency = 1
statsLabel.Text = "Ping: -- ms | FPS: --"
statsLabel.Parent = mainFrame

local function saveUIPosition()
    parentGui:SetAttribute("LastUIPosX", mainFrame.Position.X.Offset)
    parentGui:SetAttribute("LastUIPosY", mainFrame.Position.Y.Offset)
end

local function loadUIPosition()
    local x = parentGui:GetAttribute("LastUIPosX") or 10
    local y = parentGui:GetAttribute("LastUIPosY") or 10
    local size = workspace.CurrentCamera.ViewportSize
    x = math.clamp(x, 0, size.X - mainFrame.Size.X.Offset)
    y = math.clamp(y, 0, size.Y - mainFrame.Size.Y.Offset)
    return UDim2.new(0, x, 0, y)
end

mainFrame.Position = loadUIPosition()

local function median(t)
    local sorted = table.clone(t)
    table.sort(sorted)
    local n = #sorted
    if n % 2 == 0 then
        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2
    else
        return sorted[math.ceil(n / 2)]
    end
end

local updateInterval = 1
local lastUpdate = tick()
local frameCount = 0

local fpsEstimate = 60
local fpsTrend = 0
local alpha = 0.2
local beta = 0.05

local pingBuffer = {}
local pingLimit = 10
local pingEstimate = 50

local function colorizeFPS(value)
    if value >= 60 then
        return Color3.fromRGB(0, 255, 0)
    elseif value >= 30 then
        return Color3.fromRGB(255, 255, 0)
    else
        return Color3.fromRGB(255, 0, 0)
    end
end

local function colorizePing(value)
    if value < 80 then
        return Color3.fromRGB(0, 255, 0)
    elseif value < 150 then
        return Color3.fromRGB(255, 255, 0)
    else
        return Color3.fromRGB(255, 0, 0)
    end
end

local function updateUI()
    local pingColor = colorizePing(pingEstimate)
    local fpsColor = colorizeFPS(fpsEstimate)

    statsLabel.Text =
        string.format(
        '<font color="rgb(255,255,255)">Ping:</font> <font color="rgb(%d,%d,%d)">%d ms</font> | <font color="rgb(255,255,255)">FPS:</font> <font color="rgb(%d,%d,%d)">%d</font>',
        pingColor.R * 255,
        pingColor.G * 255,
        pingColor.B * 255,
        pingEstimate,
        fpsColor.R * 255,
        fpsColor.G * 255,
        fpsColor.B * 255,
        fpsEstimate
    )
end

RunService.Heartbeat:Connect(
    function(dt)
        frameCount += 1
        local rawPing = math.clamp(Stats.Network.ServerStatsItem["Data Ping"]:GetValue(), 0, 999)
        table.insert(pingBuffer, rawPing)
        if #pingBuffer > pingLimit then
            table.remove(pingBuffer, 1)
        end

        local now = tick()
        if now - lastUpdate >= updateInterval then
            local rawFPS = frameCount / (now - lastUpdate)
            local prevFPS = fpsEstimate
            fpsEstimate = alpha * rawFPS + (1 - alpha) * (fpsEstimate + fpsTrend)
            fpsTrend = beta * (fpsEstimate - prevFPS)
            if #pingBuffer > 0 then
                pingEstimate = median(pingBuffer)
            end
            updateUI()
            frameCount = 0
            lastUpdate = now
        end
    end
)

local dragging = false
local dragStart, startPos

mainFrame.InputBegan:Connect(
    function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(
                function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                        saveUIPosition()
                    end
                end
            )
        end
    end
)

UserInputService.InputChanged:Connect(
    function(input)
        if
            dragging and
                (input.UserInputType == Enum.UserInputType.MouseMovement or
                    input.UserInputType == Enum.UserInputType.Touch)
         then
            local delta = input.Position - dragStart
            local newX =
                math.clamp(
                startPos.X.Offset + delta.X,
                0,
                workspace.CurrentCamera.ViewportSize.X - mainFrame.Size.X.Offset
            )
            local newY =
                math.clamp(
                startPos.Y.Offset + delta.Y,
                0,
                workspace.CurrentCamera.ViewportSize.Y - mainFrame.Size.Y.Offset
            )
            mainFrame.Position = UDim2.new(0, newX, 0, newY)
        end
    end
)

local lastToggle = 0
local toggleDebounce = 0.5

local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ToggleStatsButton"
toggleButton.Text = "Toggle Stats"
toggleButton.Size = UDim2.new(0, 100, 0, 25)
toggleButton.Position = UDim2.new(0, 10, 0, 70)
toggleButton.BackgroundColor3 = Color3.new(0, 0, 0)
toggleButton.BackgroundTransparency = 0.7
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.TextScaled = true
toggleButton.Parent = screenGui

toggleButton.MouseButton1Click:Connect(
    function()
        local now = tick()
        if now - lastToggle < toggleDebounce then
            return
        end
        lastToggle = now

        local viewSize = workspace.CurrentCamera.ViewportSize
        if mainFrame.Visible then
            local offX = mainFrame.Position.X.Offset < viewSize.X / 2 and -mainFrame.Size.X.Offset or viewSize.X
            local target = UDim2.new(0, offX, 0, mainFrame.Position.Y.Offset)
            local tweenOut =
                TweenService:Create(
                mainFrame,
                TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
                {Position = target}
            )
            tweenOut:Play()
            tweenOut.Completed:Connect(
                function()
                    mainFrame.Visible = false
                end
            )
        else
            local start = loadUIPosition()
            local offX = start.X.Offset < viewSize.X / 2 and -mainFrame.Size.X.Offset or viewSize.X
            mainFrame.Position = UDim2.new(0, offX, 0, start.Y.Offset)
            mainFrame.Visible = true
            local tweenIn =
                TweenService:Create(
                mainFrame,
                TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
                {Position = start}
            )
            tweenIn:Play()
        end
    end
)

local fadeTween =
    TweenService:Create(
    mainFrame,
    TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    {BackgroundTransparency = 0.5}
)
local labelTween =
    TweenService:Create(
    statsLabel,
    TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    {TextTransparency = 0}
)
task.wait(0.5)
fadeTween:Play()
labelTween:Play()
